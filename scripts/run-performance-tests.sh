#!/bin/bash

# MailGenius Performance Test Runner
# Este script facilita a execu√ß√£o dos testes de performance

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para imprimir header
print_header() {
    echo ""
    echo "=============================================="
    echo "  MailGenius Performance Test Runner"
    echo "=============================================="
    echo ""
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    print_header
    echo "Uso: $0 [COMANDO] [OP√á√ïES]"
    echo ""
    echo "COMANDOS:"
    echo "  quick           Testes r√°pidos (5-10 min)"
    echo "  critical        Testes cr√≠ticos (10-20 min)"
    echo "  load            Testes de carga (20-30 min)"
    echo "  benchmark       Benchmarks (15-25 min)"
    echo "  2mm             Teste de 2MM contatos (30-45 min)"
    echo "  2mm-import      Teste de importa√ß√£o 2MM (10-15 min)"
    echo "  2mm-email       Teste de email 2MM (10-15 min)"
    echo "  2mm-database    Teste de banco 2MM (10-15 min)"
    echo "  all             Todos os testes (60-90 min)"
    echo "  list            Listar testes dispon√≠veis"
    echo "  validate        Validar configura√ß√£o"
    echo "  monitor         Iniciar monitoramento"
    echo ""
    echo "OP√á√ïES:"
    echo "  -h, --help      Mostrar esta ajuda"
    echo "  -v, --verbose   Output detalhado"
    echo "  -r, --report    Gerar relat√≥rio"
    echo "  -p, --parallel  Executar em paralelo"
    echo "  -n, --no-monitor Desabilitar monitoramento"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 quick                 # Executa testes r√°pidos"
    echo "  $0 2mm --report          # Executa teste 2MM com relat√≥rio"
    echo "  $0 load --parallel       # Executa testes de carga em paralelo"
    echo "  $0 critical --verbose    # Executa testes cr√≠ticos com output detalhado"
    echo ""
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    print_message $BLUE "üîç Verificando depend√™ncias..."
    
    # Verificar Node.js
    if ! command -v node &> /dev/null; then
        print_message $RED "‚ùå Node.js n√£o encontrado. Instale Node.js 18+"
        exit 1
    fi
    
    # Verificar vers√£o do Node.js
    NODE_VERSION=$(node -v | cut -d'.' -f1 | cut -d'v' -f2)
    if [ "$NODE_VERSION" -lt 18 ]; then
        print_message $RED "‚ùå Node.js 18+ requerido. Vers√£o atual: $(node -v)"
        exit 1
    fi
    
    # Verificar npm
    if ! command -v npm &> /dev/null; then
        print_message $RED "‚ùå npm n√£o encontrado"
        exit 1
    fi
    
    # Verificar tsx
    if ! command -v npx &> /dev/null; then
        print_message $RED "‚ùå npx n√£o encontrado"
        exit 1
    fi
    
    print_message $GREEN "‚úÖ Depend√™ncias verificadas"
}

# Fun√ß√£o para verificar servi√ßos
check_services() {
    print_message $BLUE "üîç Verificando servi√ßos..."
    
    # Verificar PostgreSQL
    if ! nc -z localhost 5432; then
        print_message $YELLOW "‚ö†Ô∏è PostgreSQL n√£o est√° rodando em localhost:5432"
        print_message $YELLOW "   Certifique-se de que o banco est√° ativo para testes completos"
    fi
    
    # Verificar Redis
    if ! nc -z localhost 6379; then
        print_message $YELLOW "‚ö†Ô∏è Redis n√£o est√° rodando em localhost:6379"
        print_message $YELLOW "   Certifique-se de que o Redis est√° ativo para testes completos"
    fi
    
    print_message $GREEN "‚úÖ Verifica√ß√£o de servi√ßos conclu√≠da"
}

# Fun√ß√£o para preparar ambiente
prepare_environment() {
    print_message $BLUE "üîß Preparando ambiente de testes..."
    
    # Criar diret√≥rio de relat√≥rios
    mkdir -p performance-reports
    
    # Limpar relat√≥rios antigos (manter apenas √∫ltimos 10)
    find performance-reports -name "*.html" -mtime +7 -delete 2>/dev/null || true
    
    # Verificar vari√°veis de ambiente
    if [ -z "$DATABASE_URL" ]; then
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/mailgenius_test"
    fi
    
    if [ -z "$REDIS_URL" ]; then
        export REDIS_URL="redis://localhost:6379"
    fi
    
    if [ -z "$NODE_ENV" ]; then
        export NODE_ENV="test"
    fi
    
    print_message $GREEN "‚úÖ Ambiente preparado"
}

# Fun√ß√£o para executar teste
run_test() {
    local test_type=$1
    local options=$2
    
    print_message $BLUE "üöÄ Executando testes: $test_type"
    print_message $YELLOW "‚è±Ô∏è Isso pode demorar alguns minutos..."
    
    case $test_type in
        "quick")
            npm run performance:test:quick $options
            ;;
        "critical")
            npm run performance:test:critical $options
            ;;
        "load")
            npm run performance:test:load $options
            ;;
        "benchmark")
            npm run performance:test:benchmark $options
            ;;
        "2mm")
            npm run performance:test:2mm $options
            ;;
        "2mm-import")
            npm run performance:test:2mm:import $options
            ;;
        "2mm-email")
            npm run performance:test:2mm:email $options
            ;;
        "2mm-database")
            npm run performance:test:2mm:database $options
            ;;
        "all")
            npm run performance:test:all $options
            ;;
        "list")
            npm run performance:list
            ;;
        "validate")
            npm run performance:validate
            ;;
        "monitor")
            npm run performance:monitor
            ;;
        *)
            print_message $RED "‚ùå Teste desconhecido: $test_type"
            show_help
            exit 1
            ;;
    esac
}

# Fun√ß√£o para mostrar resumo final
show_summary() {
    print_message $GREEN "‚úÖ Testes de performance conclu√≠dos!"
    echo ""
    
    # Verificar se h√° relat√≥rios
    if [ -d "performance-reports" ] && [ "$(ls -A performance-reports)" ]; then
        print_message $BLUE "üìä Relat√≥rios gerados:"
        ls -la performance-reports/ | grep -E '\.(html|json)$' | tail -5
        echo ""
        
        # Mostrar √∫ltimo relat√≥rio HTML
        LATEST_HTML=$(ls -t performance-reports/*.html 2>/dev/null | head -1)
        if [ -n "$LATEST_HTML" ]; then
            print_message $BLUE "üìÑ √öltimo relat√≥rio: $LATEST_HTML"
            print_message $YELLOW "   Abra no navegador para visualizar os resultados"
        fi
    fi
    
    echo ""
    print_message $BLUE "üîó Recursos √∫teis:"
    echo "  - Documenta√ß√£o: src/tests/performance/README.md"
    echo "  - Troubleshooting: docs/TROUBLESHOOTING.md"
    echo "  - Monitoring: docs/MONITORING_GUIDE.md"
    echo ""
}

# Fun√ß√£o principal
main() {
    # Verificar se h√° argumentos
    if [ $# -eq 0 ]; then
        show_help
        exit 1
    fi
    
    # Parse dos argumentos
    local command=""
    local options=""
    local verbose=false
    local report=true
    local parallel=false
    local monitor=true
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                options="$options --verbose"
                shift
                ;;
            -r|--report)
                report=true
                options="$options --report"
                shift
                ;;
            -p|--parallel)
                parallel=true
                options="$options --parallel"
                shift
                ;;
            -n|--no-monitor)
                monitor=false
                options="$options --no-monitor"
                shift
                ;;
            *)
                if [ -z "$command" ]; then
                    command=$1
                else
                    print_message $RED "‚ùå Comando desconhecido: $1"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Adicionar op√ß√µes padr√£o
    if [ "$monitor" = true ]; then
        options="$options --monitor"
    fi
    
    if [ "$report" = true ]; then
        options="$options --report"
    fi
    
    # Executar
    print_header
    
    # Verifica√ß√µes iniciais
    if [ "$command" != "list" ] && [ "$command" != "validate" ]; then
        check_dependencies
        check_services
        prepare_environment
    fi
    
    # Executar teste
    if run_test "$command" "$options"; then
        if [ "$command" != "list" ] && [ "$command" != "validate" ] && [ "$command" != "monitor" ]; then
            show_summary
        fi
    else
        print_message $RED "‚ùå Teste falhou!"
        exit 1
    fi
}

# Executar fun√ß√£o principal
main "$@"